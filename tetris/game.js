//新的设计方案
// 192, 144, 48, 96

// 11000000
// 11000000


// 1100 
// 1100 
// 0000 
// 0000                 1111


// 0 0001100000 0
// 0 0001100000 0
// 0 0000000000 0
// 0 0000000000 0

// 0 0000110000 0
// 0 0000110000 0
// 0 0000000000 0
// 0 0000000000 0


// 1.制造游戏状态区12位 2进制 表示1 0000000000 1, 左右两边表示边界
// 2.方块使用16进制表示, 转换成16位2进制, 转换成4个元素的数组, 每个元素为10位2进制
// 0xcc00
    
// 1100
// 1100
// 0000
// 0000

// 1100000000
// 1100000000
// 0000000000
// 0000000000

// 3.整体向下移动, 判断是否位置被占用, 如果占用, 停止向下移动, 修改游戏状态区, 重新生成方块, 进入2, 否则3

// 4.左右移位, 保持10位 数组每个元素(10位)和当前行(12位) & 运算 不为0 则表示 将要移动的位置已被占用, 不做移动
var height = 20, 
	line   = 0x801,
	bottom = 0xfff,
	shapes = [
		[0xcc00],
		[0x4c80, 0xc600],
		[0x8c40, 0x6c00],
		[0xf000, 0x8888],
		[0x88c0, 0xe800, 0xc440, 0x2e00],
		[0x44c0, 0x8e00, 0xc880, 0xe200],
		[0xe400, 0x4c40, 0x4e00, 0x8c80]
	],
	active = {shape:[], x: 4, y: 0},
	board  = [bottom];

while(board.length <= height) {
	board.unshift(line);
}
console.log(board)

function rotate() {
	for(var i=0; i<4; i++) {
		active.shape[i] = (sixteen>>(12 - i * 4)&15)<<6;
	}
}

map16to2Arr(shapes[0][0])
console.log(active)


























